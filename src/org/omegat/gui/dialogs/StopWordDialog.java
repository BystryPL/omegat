/**************************************************************************
 OmegaT - Computer Assisted Translation (CAT) tool 
          with fuzzy matching, translation memory, keyword search, 
          glossaries, and translation leveraging into updated projects.

 Copyright (C) 2013 Zoltan Bartko - bartkozoltan@bartkozoltan.com
               Home page: http://www.omegat.org/
               Support center: http://groups.yahoo.com/group/OmegaT/

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
 **************************************************************************/

package org.omegat.gui.dialogs;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import org.omegat.core.Core;
import org.omegat.util.Language;
import org.omegat.util.OStrings;
import org.omegat.util.gui.LanguageComboBoxRenderer;

/**
 *
 * @author bartkoz
 */
public class StopWordDialog extends javax.swing.JDialog {

    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;

    private int returnStatus = RET_CANCEL;

    /**
     * the language list model
     */
    private DefaultListModel languageListModel;
    
    /**
     * the stop word base.
     */
    Map<String,String> stopWordBase = new HashMap<String,String>();
    
    /**
     * the current key
     */
    String currentKey = null;
    
    /**
     * the current value
     */
    String currentValue = null;
            
    /**
     * Creates new form StopWordDialog
     */
    public StopWordDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        // HP
        // Handle escape key to close the window
        KeyStroke escape = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false);
        Action escapeAction = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        };
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(escape, "ESCAPE");
        getRootPane().getActionMap().put("ESCAPE", escapeAction);
        // END HP
        
        initComponents();
        languageListModel = new DefaultListModel();
        loadData();
    }

    /**
     * Convert a list of strings to a text with a string per line
     * @param values the value string
     * @return the text (a single string)
     */
    private String processValues(List<String> values) {
        StringBuilder builder = new StringBuilder();
        for (String value:values) {
            builder.append(value).append("\n");
        }
        return builder.toString();
    }
    
    private void loadData() {
        Map<Pattern,List<String>> stopWords = Core.getStopWords().getStopWordBase();
        
        languageListModel.clear();
        
        for (Map.Entry<Pattern,List<String>> entry : stopWords.entrySet()){   
            ArrayList<String> values = new ArrayList<String>(100);
            for (String value:entry.getValue()) {
                values.add(value);
            }
            stopWordBase.put(entry.getKey().pattern(),processValues(values));
            languageListModel.addElement(entry.getKey().pattern());
        } 
            
        jLanguageList.setModel(languageListModel);
        if (!languageListModel.isEmpty()) {
            jLanguageList.setSelectedIndex(0);
            currentKey = (String) jLanguageList.getSelectedValue();
            currentValue = stopWordBase.get(currentKey);
            jStopWordTextArea.setText(currentValue);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLanguageScrollPane = new javax.swing.JScrollPane();
        jLanguageList = new javax.swing.JList();
        jLanguageListLabel = new javax.swing.JLabel();
        jAddButton = new javax.swing.JButton();
        jDeleteButton = new javax.swing.JButton();
        jStopWordScrollPane = new javax.swing.JScrollPane();
        jStopWordTextArea = new javax.swing.JTextArea();
        jStopWordTextAreaLabel = new javax.swing.JLabel();
        jOkButton = new javax.swing.JButton();
        jCancelButton = new javax.swing.JButton();
        jLanguageComboBoxLabel = new javax.swing.JLabel();
        jEditButton = new javax.swing.JButton();
        jLanguageTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(OStrings.getString("SWD_TITLE")); // NOI18N
        setResizable(false);

        jLanguageList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jLanguageList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jLanguageListValueChanged(evt);
            }
        });
        jLanguageScrollPane.setViewportView(jLanguageList);

        org.openide.awt.Mnemonics.setLocalizedText(jLanguageListLabel, OStrings.getString("SWD_LANGUAGE_LIST_LABEL")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jAddButton, OStrings.getString("BUTTON_ADD_NODOTS")); // NOI18N
        jAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jDeleteButton, OStrings.getString("BUTTON_REMOVE")); // NOI18N
        jDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteButtonActionPerformed(evt);
            }
        });

        jStopWordTextArea.setColumns(20);
        jStopWordTextArea.setFont(jLanguageList.getFont());
        jStopWordTextArea.setRows(5);
        jStopWordTextArea.setToolTipText("Enter the stopwords here, one in a row");
        jStopWordScrollPane.setViewportView(jStopWordTextArea);

        org.openide.awt.Mnemonics.setLocalizedText(jStopWordTextAreaLabel, OStrings.getString("SWD_STOP_WORD_LIST")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jOkButton, OStrings.getString("BUTTON_OK")); // NOI18N
        jOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOkButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCancelButton, OStrings.getString("BUTTON_CANCEL")); // NOI18N
        jCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCancelButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLanguageComboBoxLabel, OStrings.getString("SWD_LANGUAGE_TEXTFIELD_LABEL")); // NOI18N
        jLanguageComboBoxLabel.setToolTipText("");

        org.openide.awt.Mnemonics.setLocalizedText(jEditButton, OStrings.getString("SWD_BUTTON_EDIT")); // NOI18N
        jEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEditButtonActionPerformed(evt);
            }
        });

        jLanguageTextField.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLanguageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLanguageListLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jStopWordTextAreaLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jStopWordScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jCancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jOkButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLanguageComboBoxLabel)
                            .addComponent(jAddButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jEditButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDeleteButton))
                            .addComponent(jLanguageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLanguageListLabel)
                    .addComponent(jStopWordTextAreaLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLanguageScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                            .addComponent(jStopWordScrollPane))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLanguageComboBoxLabel)
                            .addComponent(jLanguageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jAddButton)
                            .addComponent(jDeleteButton)
                            .addComponent(jEditButton))
                        .addGap(8, 8, 8))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jOkButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCancelButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Saves the current value from the editor and returns the new selected key
     * @return 
     */
    private void updateKeyAndValueFromGUI() {
        String newValue = jStopWordTextArea.getText();
        if (!currentValue.equals(newValue)) {
            stopWordBase.put(currentKey,newValue);
            currentValue = newValue;
        }
        String selected = (String) jLanguageList.getSelectedValue();
        if (!currentKey.equals(selected)) {
            currentKey = selected;
            currentValue = stopWordBase.get(currentKey);
        }
    }
    private void jLanguageListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jLanguageListValueChanged
        // TODO add your handling code here:
        if (evt.getValueIsAdjusting()) {
            updateKeyAndValueFromGUI();
            jStopWordTextArea.setText(currentValue);
            jLanguageTextField.setText(currentKey);
        }
    }//GEN-LAST:event_jLanguageListValueChanged

    private void jAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddButtonActionPerformed
        // TODO add your handling code here:
        updateKeyAndValueFromGUI();
        currentKey = jLanguageTextField.getText().trim();
        currentValue = "";
        stopWordBase.put(currentKey, currentValue);
        languageListModel.addElement(currentKey);
        jLanguageList.setSelectedValue(currentKey, true);
        jStopWordTextArea.setText(currentValue);
    }//GEN-LAST:event_jAddButtonActionPerformed

    private void jEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEditButtonActionPerformed
        // TODO add your handling code here:
        updateKeyAndValueFromGUI();
        if (jLanguageList.getSelectedValue() != null) {
            //String oldText = (String) jLanguageList.getSelectedValue();
            String newText = jLanguageTextField.getText().trim();
            languageListModel.setElementAt(newText, jLanguageList.getSelectedIndex());
            stopWordBase.remove(currentKey);
            currentKey = newText;
            stopWordBase.put(currentKey, currentValue);
        }
    }//GEN-LAST:event_jEditButtonActionPerformed

    private void jDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteButtonActionPerformed
        String toRemove = jLanguageTextField.getText();
        if (!languageListModel.removeElement(jLanguageTextField.getText()) ||
                stopWordBase.remove(toRemove) == null) {
            JOptionPane.showMessageDialog(null,
                    OStrings.getString("SWD_UNABLE_TO_DELETE") + " " + jLanguageTextField.getText(),
                    OStrings.getString("ERROR_TITLE"), JOptionPane.ERROR_MESSAGE);
            return;
        }
                
        languageListModel.removeElement(toRemove);
        jLanguageList.setSelectedIndex(0);
        currentKey = (String) jLanguageList.getSelectedValue();
        currentValue = stopWordBase.get(currentKey);
        jStopWordTextArea.setText(currentValue);
        jLanguageTextField.setText(currentKey);
    }//GEN-LAST:event_jDeleteButtonActionPerformed

    private void jCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelButtonActionPerformed
        // TODO add your handling code here:
        returnStatus = RET_CANCEL;
        dispose();
    }//GEN-LAST:event_jCancelButtonActionPerformed

    private List<String> makeStringList(String source) {
        List<String> strings = new ArrayList<String>(50);
        int start = 0;
        int end;
        String line;
        while (start < source.length()) {
            end = source.indexOf("\n",start);
            if (end == -1) {
                end = source.length();
            }
            if (end - start > 0) {
                line = source.substring(start, end);
                String trimmedLine = line.trim();
                if (trimmedLine.length() > 0) {
                    strings.add(trimmedLine);
                }
            }
            start = end + 1;
        }
        return strings;
    }
    
    private void jOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOkButtonActionPerformed
        returnStatus = RET_OK;
        updateKeyAndValueFromGUI();
        
        Map<Pattern,List<String>> stopWords = Core.getStopWords().getStopWordBase();
        stopWords.clear();
        
        for (Map.Entry<String,String> entry:stopWordBase.entrySet()) {
            stopWords.put(Pattern.compile(entry.getKey()), makeStringList(entry.getValue()));
        }
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jOkButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAddButton;
    private javax.swing.JButton jCancelButton;
    private javax.swing.JButton jDeleteButton;
    private javax.swing.JButton jEditButton;
    private javax.swing.JLabel jLanguageComboBoxLabel;
    private javax.swing.JList jLanguageList;
    private javax.swing.JLabel jLanguageListLabel;
    private javax.swing.JScrollPane jLanguageScrollPane;
    private javax.swing.JTextField jLanguageTextField;
    private javax.swing.JButton jOkButton;
    private javax.swing.JScrollPane jStopWordScrollPane;
    private javax.swing.JTextArea jStopWordTextArea;
    private javax.swing.JLabel jStopWordTextAreaLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the returnStatus
     */
    public int getReturnStatus() {
        return returnStatus;
    }
}
